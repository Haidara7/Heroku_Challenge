{"ast":null,"code":"var _jsxFileName = \"/home/haidara/challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isConnected: false,\n      peeps: []\n    };\n    this.socket = null;\n  }\n\n  componentWillMount() {\n    this.socket = io('https://codi-server.herokuapp.com');\n    this.socket.on('connect', () => {\n      this.setState({\n        isConnected: true\n      });\n    });\n    this.socket.on('pong!', additionalStuff => {\n      console.log('server answered!', additionalStuff);\n    });\n    this.socket.on('peeps', socket => {\n      this.setState({\n        peeps: socket\n      });\n      console.log(\"peeps\", this.state.peeps);\n    });\n    this.socket.on('youare', answer => {\n      this.setState({\n        id: answer.id\n      });\n    });\n    this.socket.on('disconnect', () => {\n      this.setState({\n        isConnected: false\n      });\n    });\n    /** this will be useful way, way later **/\n\n    this.socket.on('room', old_messages => console.log(old_messages));\n    this.socket.on('next', message_from_server => console.log(message_from_server));\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"status: \", this.state.isConnected ? 'connected' : 'disconnected'), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"id: \", this.state.id), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('ping!'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"ping\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('whoami'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Who am I?\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('give a next'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"next\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/haidara/challenge/src/App.js"],"names":["React","Component","io","App","state","isConnected","peeps","socket","componentWillMount","on","setState","additionalStuff","console","log","answer","id","old_messages","message_from_server","componentWillUnmount","close","render","emit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAG1BG,KAH0B,GAGlB;AACNC,MAAAA,WAAW,EAAC,KADN;AAENC,MAAAA,KAAK,EAAG;AAFF,KAHkB;AAAA,SAO1BC,MAP0B,GAOjB,IAPiB;AAAA;;AAS1BC,EAAAA,kBAAkB,GAAE;AAElB,SAAKD,MAAL,GAAcL,EAAE,CAAC,mCAAD,CAAhB;AAEA,SAAKK,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA0B,MAAM;AAC9B,WAAKC,QAAL,CAAc;AAACL,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD,KAFD;AAIA,SAAKE,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAAwBE,eAAD,IAAmB;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,eAAhC;AACD,KAFD;AAIA,SAAKJ,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAAwBF,MAAD,IAAU;AAC/B,WAAKG,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAACC;AAAP,OAAd;AACFK,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoB,KAAKT,KAAL,CAAWE,KAA/B;AAGC,KALD;AAOA,SAAKC,MAAL,CAAYE,EAAZ,CAAe,QAAf,EAAyBK,MAAD,IAAU;AAClC,WAAKJ,QAAL,CAAc;AAACK,QAAAA,EAAE,EAACD,MAAM,CAACC;AAAX,OAAd;AACD,KAFC;AAIA,SAAKR,MAAL,CAAYE,EAAZ,CAAe,YAAf,EAA6B,MAAM;AACjC,WAAKC,QAAL,CAAc;AAACL,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD,KAFD;AAKA;;AACA,SAAKE,MAAL,CAAYE,EAAZ,CAAe,MAAf,EAAuBO,YAAY,IAAIJ,OAAO,CAACC,GAAR,CAAYG,YAAZ,CAAvC;AACA,SAAKT,MAAL,CAAYE,EAAZ,CAAe,MAAf,EAAuBQ,mBAAD,IAAuBL,OAAO,CAACC,GAAR,CAAYI,mBAAZ,CAA7C;AAGD;;AAEDC,EAAAA,oBAAoB,GAAE;AACpB,SAAKX,MAAL,CAAYY,KAAZ;AACA,SAAKZ,MAAL,GAAc,IAAd;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAc,KAAKhB,KAAL,CAAWC,WAAX,GAAyB,WAAzB,GAAuC,cAArD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAU,KAAKD,KAAL,CAAWW,EAArB,CAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKR,MAAL,CAAYc,IAAZ,CAAiB,OAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKd,MAAL,CAAYc,IAAZ,CAAiB,QAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,EAKE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKd,MAAL,CAAYc,IAAZ,CAAiB,aAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CADF;AASD;;AA3DyB;;AA8D5B,eAAelB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  \n\n  state = {\n    isConnected:false,\n    peeps : []\n  }\n  socket = null\n\n  componentWillMount(){\n\n    this.socket = io('https://codi-server.herokuapp.com');\n\n    this.socket.on('connect', () => {\n      this.setState({isConnected:true})\n    })\n\n    this.socket.on('pong!',(additionalStuff)=>{\n      console.log('server answered!', additionalStuff)\n    })\n\n    this.socket.on('peeps',(socket)=>{\n      this.setState({peeps:socket})\n    console.log(\"peeps\",this.state.peeps);\n      \n      \n    })\n\n    this.socket.on('youare',(answer)=>{\n    this.setState({id:answer.id})\n  })\n\n    this.socket.on('disconnect', () => {\n      this.setState({isConnected:false})\n    })\n    \n\n    /** this will be useful way, way later **/\n    this.socket.on('room', old_messages => console.log(old_messages))\n    this.socket.on('next',(message_from_server)=>console.log(message_from_server))\n\n\n  }\n\n  componentWillUnmount(){\n    this.socket.close()\n    this.socket = null\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>status: {this.state.isConnected ? 'connected' : 'disconnected'}</div>\n        <div>id: {this.state.id}</div>\n        <button onClick={()=>this.socket.emit('ping!')}>ping</button>\n        <button onClick={()=>this.socket.emit('whoami')}>Who am I?</button>\n        <button onClick={()=>this.socket.emit('give a next')}>next</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}