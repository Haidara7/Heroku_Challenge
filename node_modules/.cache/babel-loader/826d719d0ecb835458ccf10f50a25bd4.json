{"ast":null,"code":"var _jsxFileName = \"/home/haidara/challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isConnected: false,\n      peeps: [],\n      message: ''\n    };\n    this.socket = null;\n  }\n\n  componentWillMount() {\n    this.socket = io('https://codi-server.herokuapp.com');\n    this.socket.on('connect', () => {\n      this.setState({\n        isConnected: true\n      });\n    });\n    this.socket.on('pong!', additionalStuff => {\n      console.log('server answered!', additionalStuff);\n    });\n    this.socket.on('peeps', socket => {\n      this.setState({\n        peeps: socket\n      });\n      console.log(\"peeps\", this.state.peeps);\n    });\n    this.socket.on('youare', answer => {\n      this.setState({\n        id: answer.id\n      });\n    });\n    this.socket.on('disconnect', () => {\n      this.setState({\n        isConnected: false\n      });\n    });\n    /** this will be useful way, way later **/\n\n    this.socket.on('room', old_messages => console.log(old_messages));\n    this.socket.on('next', message_from_server => console.log(message_from_server));\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"status: \", this.state.isConnected ? 'connected' : 'disconnected'), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"id: \", this.state.id), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('ping!'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"ping\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('whoami'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Who am I?\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('give me next'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"next\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('addition'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"addition\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('answer', this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"answer\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.message,\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/haidara/challenge/src/App.js"],"names":["React","Component","io","App","state","isConnected","peeps","message","socket","componentWillMount","on","setState","additionalStuff","console","log","answer","id","old_messages","message_from_server","componentWillUnmount","close","render","emit","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  \n\n  state = {\n    isConnected:false,\n    peeps : [],\n    message:''\n  }\n  socket = null\n\n  componentWillMount(){\n\n    this.socket = io('https://codi-server.herokuapp.com');\n\n    this.socket.on('connect', () => {\n      this.setState({isConnected:true})\n    })\n\n    this.socket.on('pong!',(additionalStuff)=>{\n      console.log('server answered!', additionalStuff)\n    })\n\n    this.socket.on('peeps',(socket)=>{\n      this.setState({peeps:socket})\n    console.log(\"peeps\",this.state.peeps);\n      \n      \n    })\n\n    this.socket.on('youare',(answer)=>{\n    this.setState({id:answer.id})\n  })\n\n    this.socket.on('disconnect', () => {\n      this.setState({isConnected:false})\n    })\n    \n\n    /** this will be useful way, way later **/\n    this.socket.on('room', old_messages => console.log(old_messages))\n    this.socket.on('next',(message_from_server)=>console.log(message_from_server))\n\n\n  }\n\n  componentWillUnmount(){\n    this.socket.close()\n    this.socket = null\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>status: {this.state.isConnected ? 'connected' : 'disconnected'}</div>\n        <div>id: {this.state.id}</div>\n        <button onClick={()=>this.socket.emit('ping!')}>ping</button>\n        <button onClick={()=>this.socket.emit('whoami')}>Who am I?</button>\n        <button onClick={()=>this.socket.emit('give me next')}>next</button>\n        <button onClick={()=>this.socket.emit('addition')}>addition</button>\n        <button onClick={()=>this.socket.emit('answer',this.state.message)}>answer</button>\n        <input type = \"text\" value={this.state.message} onChange={(e)=>this.setState({message:e.target.value})} ></input>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}