{"ast":null,"code":"var _jsxFileName = \"/home/haidara/challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isConnected: false\n    };\n    this.socket = null;\n  }\n\n  componentWillMount() {\n    this.socket = io('https://codi-server.herokuapp.com');\n    this.socket.on('connect', () => {\n      this.setState({\n        isConnected: true\n      });\n    });\n    this.socket.on('pong!', additionalStuff => {\n      console.log('server answered!', additionalStuff);\n    });\n    this.socket.on('youare', answer => {\n      this.setState({\n        id: answer.id\n      });\n    });\n    this.socket.on('disconnect', () => {\n      this.setState({\n        isConnected: false\n      });\n    });\n    /** this will be useful way, way later **/\n\n    this.socket.on('room', old_messages => console.log(old_messages));\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"status: \", this.state.isConnected ? 'connected' : 'disconnected'), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"id: \", this.state.id), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('ping!'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"ping\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('whoami'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Who am I?\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/haidara/challenge/src/App.js"],"names":["React","Component","io","App","state","isConnected","socket","componentWillMount","on","setState","additionalStuff","console","log","answer","id","old_messages","componentWillUnmount","close","render","emit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BG,KAF0B,GAElB;AACNC,MAAAA,WAAW,EAAC;AADN,KAFkB;AAAA,SAK1BC,MAL0B,GAKjB,IALiB;AAAA;;AAO1BC,EAAAA,kBAAkB,GAAE;AAElB,SAAKD,MAAL,GAAcJ,EAAE,CAAC,mCAAD,CAAhB;AAEA,SAAKI,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA0B,MAAM;AAC9B,WAAKC,QAAL,CAAc;AAACJ,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD,KAFD;AAIA,SAAKC,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAAwBE,eAAD,IAAmB;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,eAAhC;AACD,KAFD;AAIA,SAAKJ,MAAL,CAAYE,EAAZ,CAAe,QAAf,EAAyBK,MAAD,IAAU;AAChC,WAAKJ,QAAL,CAAc;AAACK,QAAAA,EAAE,EAACD,MAAM,CAACC;AAAX,OAAd;AACD,KAFD;AAIA,SAAKR,MAAL,CAAYE,EAAZ,CAAe,YAAf,EAA6B,MAAM;AACjC,WAAKC,QAAL,CAAc;AAACJ,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD,KAFD;AAIA;;AACA,SAAKC,MAAL,CAAYE,EAAZ,CAAe,MAAf,EAAuBO,YAAY,IAAIJ,OAAO,CAACC,GAAR,CAAYG,YAAZ,CAAvC;AAGD;;AAEDC,EAAAA,oBAAoB,GAAE;AACpB,SAAKV,MAAL,CAAYW,KAAZ;AACA,SAAKX,MAAL,GAAc,IAAd;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAc,KAAKd,KAAL,CAAWC,WAAX,GAAyB,WAAzB,GAAuC,cAArD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAU,KAAKD,KAAL,CAAWU,EAArB,CAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKR,MAAL,CAAYa,IAAZ,CAAiB,OAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKb,MAAL,CAAYa,IAAZ,CAAiB,QAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,CADF;AAQD;;AA/CyB;;AAkD5B,eAAehB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n\n  state = {\n    isConnected:false\n  }\n  socket = null\n\n  componentWillMount(){\n\n    this.socket = io('https://codi-server.herokuapp.com');\n\n    this.socket.on('connect', () => {\n      this.setState({isConnected:true})\n    })\n\n    this.socket.on('pong!',(additionalStuff)=>{\n      console.log('server answered!', additionalStuff)\n    })\n\n    this.socket.on('youare',(answer)=>{\n      this.setState({id:answer.id})\n    })\n\n    this.socket.on('disconnect', () => {\n      this.setState({isConnected:false})\n    })\n\n    /** this will be useful way, way later **/\n    this.socket.on('room', old_messages => console.log(old_messages))\n\n\n  }\n\n  componentWillUnmount(){\n    this.socket.close()\n    this.socket = null\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>status: {this.state.isConnected ? 'connected' : 'disconnected'}</div>\n        <div>id: {this.state.id}</div>\n        <button onClick={()=>this.socket.emit('ping!')}>ping</button>\n        <button onClick={()=>this.socket.emit('whoami')}>Who am I?</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}